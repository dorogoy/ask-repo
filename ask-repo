
#!/bin/bash
set -euo pipefail

# Default repository
DEFAULT_REPO="https://gitmcp.io/docs"

# Function to show usage
usage() {
  echo "Usage: ask-repo [github_url|user/repo] [-- goose options]"
  echo "Ask questions to AI agents about the full content of public GitHub repositories."
  echo ""
  echo "Supported formats:"
  echo "  - github.com/user/repo"
  echo "  - https://github.com/user/repo"
  echo "  - user/repo"
  echo ""
  echo "If no repository is provided, it defaults to: $DEFAULT_REPO"
  echo ""
  echo "Examples:"
  echo "  ask-repo # Uses the default repository"
  echo "  ask-repo dorogoy/ask-repo"
  echo "  ask-repo https://github.com/dorogoy/ask-repo.git"
  echo "  ask-repo dorogoy/ask-repo -- --temperature 0.2"
  echo "  ask-repo --version"
  echo "  ask-repo --upgrade"
  exit 1
}


# Upgrade flag
if [[ "${1:-}" == "-u" || "${1:-}" == "--upgrade" ]]; then
  SCRIPT_PATH="$(realpath "$0")"
  TMP_FILE="$(mktemp)"
  echo "Upgrading ask-repo from GitHub..."
  if curl -fsSL "https://raw.githubusercontent.com/dorogoy/ask-repo/master/ask-repo" -o "$TMP_FILE"; then
    chmod +x "$TMP_FILE"
    mv "$TMP_FILE" "$SCRIPT_PATH"
    echo "ask-repo was upgraded successfully."
    exit 0
  else
    echo "Error: Failed to download the latest version from GitHub." >&2
    rm -f "$TMP_FILE"
    exit 1
  fi
fi


# Check for help flag
if [[ "${1:-}" == "-h" || "${1:-}" == "--help" ]]; then
  usage
fi

# Check if goose is installed
if ! command -v goose &> /dev/null; then
  echo "Error: goose is not installed or not in your PATH." >&2
  echo "Please install it to use this script." >&2
  exit 1
fi

# Parse arguments
REPO_INPUT=""
GOOSE_ARGS=()
if [[ $# -eq 0 ]]; then
  REPO_URL="$DEFAULT_REPO"
else
  for arg in "$@"; do
    if [[ "$arg" == "--" ]]; then
      shift
      GOOSE_ARGS=("$@")
      break
    fi
    if [[ -z "$REPO_INPUT" ]]; then
      REPO_INPUT="$arg"
      shift
    fi
  done
  # Trim whitespace
  REPO_INPUT="$(echo "$REPO_INPUT" | xargs)"
  if [[ -z "$REPO_INPUT" ]]; then
    REPO_URL="$DEFAULT_REPO"
  else
    # Normalize the input
    # 1. Check for GitHub Pages URL: username.github.io/repo (with or without protocol)
    if [[ "$REPO_INPUT" =~ ^(https?://)?([a-zA-Z0-9_-]+)\.github\.io/([a-zA-Z0-9_-]+) ]]; then
      USERNAME="${BASH_REMATCH[2]}"
      REPO="${BASH_REMATCH[3]}"
      # Validate username/repo
      if [[ -z "$USERNAME" || -z "$REPO" ]]; then
        echo "Error: Malformed GitHub Pages URL: '$REPO_INPUT'" >&2
        usage
      fi
      REPO_PATH="$USERNAME/$REPO"
      REPO_URL="https://$USERNAME.gitmcp.io/$REPO"
    else
      # 2. Standard GitHub repo URL normalization
      REPO_PATH=$(echo "$REPO_INPUT" | sed -E 's/^(https?:\/\/)?(www\.)?github\.com\///' | sed 's/\.git$//' | sed 's/\/$//')
      # Validate the format
      if [[ "$REPO_PATH" =~ ^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$ ]]; then
        REPO_URL="https://gitmcp.io/$REPO_PATH"
      else
        echo "Error: Invalid repository format: '$REPO_INPUT'" >&2
        usage
      fi
    fi
  fi
fi

# Confirmation message
echo "Endpoint: $REPO_URL"

# Execute goose session with any extra arguments
if ! goose session --with-remote-extension "$REPO_URL" "${GOOSE_ARGS[@]}"; then
  echo "Error: goose command failed." >&2
  exit 1
fi
